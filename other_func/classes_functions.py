from AsyncPayments.cryptoBot import AsyncCryptoBot
from cachetools import TTLCache
from typing import Any, Awaitable, Callable, Dict

from aiogram.filters import Filter
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram import BaseMiddleware
from aiogram.fsm.context import FSMContext

from other_func.database import app_balance
from other_func.config_reader import config
import reply as kb


cryptobot = AsyncCryptoBot(token=config.pay_key)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø–∏—Å–∫–µ admin_id –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º –∏ –∑–∞–ø—Ä–æ—Å–∞–º
class IsAdmin(Filter):
    @staticmethod
    async def __call__(message: Message):
        return str(message.from_user.id) in config.admin_id


# –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ FSM
class Add_sc(StatesGroup):
    info = State()

class Add_eg(StatesGroup):
    info = State()

class Balance_state(StatesGroup):
    amount = State()
    invoice_id = State()
    check_amount = State()


# –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
class CheckSubscribe(BaseMiddleware):
    async def __call__(self,
                       handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
                       event: Message,
                       data: Dict[str, Any]) -> Any:
        chat_members = await event.bot.get_chat_member(
            chat_id=config.channel_id,
            user_id=event.from_user.id)

        if chat_members.status == 'left':
            await event.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üíö',
                           reply_markup=kb.url_channel())
        else:
            return await handler(event, data)


# –ö–ª–∞—Å—Å –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º—ã (–∫–¥ —Å–æ–æ–±—â–µ–Ω–∏–π - 1 —Å–µ–∫—É–Ω–¥–∞)
class AntiFloodMiddleware(BaseMiddleware):

    def __init__(self, time_limit: int=1) -> None:
        self.limit = TTLCache(maxsize=10_000, ttl=time_limit)

    async def __call__(self,
                       handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
                       event: Message,
                       data: Dict[str, Any]) -> Any:
        if event.chat.id in self.limit:
            return
        else:
            self.limit[event.chat.id] = None
        return await handler(event, data)


# –†–∞–±–æ—Ç–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π CryptoBot
async def check_balance() -> str:
    balance_all = await cryptobot.get_balance()

    for balance in balance_all:
        text = (f'–î–æ—Å—Ç—É–ø–Ω–æ {balance.currency_code} - {balance.available} \n'
                f'–•–æ–ª–¥  - {balance.onhold}')

        return text


async def delete_invoice(invoice_id: int) -> None:
    delete_invoice = await cryptobot.delete_invoice(invoice_id=int(invoice_id))
    return delete_invoice


async def check_invoice(invoice_id: list,
                        callback: CallbackQuery,
                        state: FSMContext,
                        amount) -> None:
    info_crypto_bot = await cryptobot.get_invoices(invoice_ids=invoice_id, asset='USDT', count=1)

    if info_crypto_bot.status == 'active':
        await callback.message.answer('–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                                      reply_markup=ReplyKeyboardRemove())
        return
    elif info_crypto_bot.status == 'expired':
        await callback.message.answer('–í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É',
                                      reply_markup=kb.main_kb())
        return
    elif info_crypto_bot.status == 'paid':
        await callback.message.answer('–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                      reply_markup=kb.main_kb())
        await app_balance(amount, callback.from_user.id)
        await delete_invoice(int(invoice_id))

    await state.clear()
