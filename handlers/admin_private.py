from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import reply as kb
from other_func.database import get_sc, get_eg, get_list_user
from other_func.classes_functions import IsAdmin, Add_sc, Add_eg, check_balance
from other_func.encrypt_db import generate_crypto_key


admin_private_router = Router()


# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ç–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ IsAdmin()
@admin_private_router.message(IsAdmin(), Command("admin_panel"))
async def admin_panel(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}\n"
                         "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=kb.admin_panel(),
                         )


@admin_private_router.message(IsAdmin(), Command("get_crypto_key"))
async def get_crypto_key(message: Message):
    encrypt_key = await generate_crypto_key()

    await message.answer(
        f"–í–∞—à –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è - {encrypt_key}",
    )


@admin_private_router.message(IsAdmin(), F.text == "üìï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä üìï")
async def add_product(message: Message):
    await message.answer("–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=kb.add_product())


@admin_private_router.message(IsAdmin(), F.text == "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë§")
async def list_user(message: Message):
    all_users: str = await get_list_user()
    await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{all_users}")


@admin_private_router.message(IsAdmin(), F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üìä")
async def exit_menu(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.admin_panel())


@admin_private_router.message(IsAdmin(), F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üëà")
async def back_main(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main_kb())


@admin_private_router.message(IsAdmin(), F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ")
async def info_main(message: Message):
    balance = await check_balance()
    await message.answer(f"{balance}")


# –ò—Å–ø–æ–ª—å–∑—É–µ–º FSMContext –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –≤ –ë–î
@admin_private_router.callback_query(F.data == "add_social_club")
async def get_sc_info(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Add_sc.info)
    await callback.answer()
    await callback.message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'login:password:key' üîë"
        )


@admin_private_router.message(Add_sc.info, F.text)
async def add_sc_info(message: Message, state: FSMContext):
    await state.update_data(info=message.text.split(":"))
    data: dict = await state.get_data()
    info = data["info"]

    if len(info) == 3:
        login = info[0]
        password = info[1]
        key: str = info[2]

        if await get_sc(login, password, key=key.replace("b'", "").replace("'", "")):
            await message.answer(
                "üîê –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É üîê",
                reply_markup=kb.admin_panel())
        else:
            await message.answer(
                "‚ùå –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ ‚ùå",
                reply_markup=kb.admin_panel())
    else:
        await message.answer(
            "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
        )
    await state.clear()


@admin_private_router.callback_query(F.data == "add_epic_games")
async def get_eg_info(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Add_eg.info)
    await callback.answer()
    await callback.message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'login:password:key üîë"
        )

@admin_private_router.message(Add_eg.info, F.text)
async def add_eg_info(message: Message, state: FSMContext):
    await state.update_data(info=message.text.split(":"))
    data: dict = await state.get_data()
    info = data["info"]

    if len(info) == 3:
        login = info[0]
        password = info[1]
        key: str = info[2]

        if await get_eg(login, password, key=key.replace("b'", "").replace("'", "")):
            await message.answer(
                "üîê –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É üîê",
                reply_markup=kb.admin_panel())
        else:
            await message.answer(
                "‚ùå –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ ‚ùå",
                reply_markup=kb.admin_panel())
    else:
        await message.answer(
            "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
        )
    await state.clear()
